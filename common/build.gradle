plugins {
    id "com.github.johnrengelman.shadow" version "4.0.4"
    id "java"
    id "signing"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "io.github.lxgaming"
archivesBaseName = "ticket-common"
version = version

configurations {
    provided {
        compile.extendsFrom(provided)
    }

    compileJava.dependsOn(":api:build")
    jar.enabled = false
    jar.dependsOn("shadowJar")
}

repositories {
    jcenter()
}

dependencies {
    shadow(project(path: ":api")) {
        exclude(module: "gson")
    }
    
    provided(project(path: ":api"))
    shadow("com.github.ben-manes.caffeine:caffeine:2.7.0")
    provided("com.google.guava:guava:28.0-jre")
    shadow("com.zaxxer:HikariCP:3.3.1") {
        exclude(module: "slf4j-api")
    }

    shadow("mysql:mysql-connector-java:5.1.47")
    shadow("org.apache.commons:commons-lang3:3.9")
}

jar {
    from {
        (configurations.compile - configurations.provided).findAll({
            it.isDirectory() || it.name.endsWith(".jar")
        }).collect({
            it.isDirectory() ? it : zipTree(it)
        })
    }
}

processResources {
    from("LICENSE")
    rename("LICENSE", "LICENSE-" + archivesBaseName)
}

shadowJar {
    classifier = null
    configurations = [project.configurations.shadow]
    exclude("server-ssl-cert.pem")
    exclude("Version.java.template")
}

task signJar {
    doFirst {
        if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
            project.logger.warn("========== [WARNING] ==========")
            project.logger.warn("")
            project.logger.warn("   This build is not signed!   ")
            project.logger.warn("")
            project.logger.warn("========== [WARNING] ==========")
            throw new StopExecutionException()
        }
    }

    doLast {
        configurations.archives.allArtifacts.files.each {
            ant.signjar(
                jar: it,
                alias: project.property("signing.alias"),
                storepass: project.property("signing.keyStorePassword"),
                keystore: project.property("signing.keyStorePath"),
                keypass: project.property("signing.keyStorePassword"),
                preservelastmodified: project.property("signing.preserveLastModified"),
                tsaurl: project.property("signing.timestampAuthority"),
                digestalg: project.property("signing.digestAlgorithm")
            )
            project.logger.lifecycle("JAR Signed: " + it.name)

            signing.sign(it)
            project.logger.lifecycle("PGP Signed: " + it.name)
        }
    }
}